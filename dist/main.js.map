{"version":3,"file":"main.js","mappings":";;;;;;;;;;AAAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;ACtBA,IAAMA,QAAQ,GAAGC,mBAAO,CAAC,0BAAU,CAAC;AACpC,IAAMC,KAAK,GAAGD,mBAAO,CAAC,8IAAiB,CAAC;AACxC,IAAME,EAAE,GAAGF,mBAAO,CAAC,cAAI,CAAC;AAExB,IAAMG,GAAG,GAAGH,mBAAO,CAAC,2IAAc,CAAC;AAEnCG,GAAG,CAACC,IAAI,CAAC,YAAY,CAAC;AACtBD,GAAG,CAACE,IAAI,CAAC,sBAAsB,CAAC;;AAEhC;AACA;AACA,IAAQC,GAAG,GAAKP,QAAQ,CAAhBO,GAAG;AACX;AACA,IAAQC,aAAa,GAAKR,QAAQ,CAA1BQ,aAAa;AAErB,IAAMC,IAAI,GAAGR,mBAAO,CAAC,kBAAM,CAAC;AAC5B;;AAEA;;AAEA;AACA;AACA,IAAIS,UAAU;AAEd,SAASC,YAAYA,CAAA,EAAG;EACtBC,OAAO,CAACC,GAAG,CAACC,kCAAkC,GAAG,MAAM;;EAEvD;EACAJ,UAAU,GAAG,IAAIF,aAAa,CAAC;IAC7BO,KAAK,EAAE,IAAI;IACXC,MAAM,EAAE,GAAG;IACXC,cAAc,EAAE;MACdC,eAAe,EAAE;IACnB;EACF,CAAC,CAAC;EAEFd,GAAG,CAACC,IAAI,CAAC,gBAAgB,CAAC;;EAE1B;EACA,IAAIH,KAAK,EAAE;IACTQ,UAAU,CAACS,OAAO,CAAC,uBAAuB,CAAC;;IAE3C;IACAT,UAAU,CAACU,WAAW,CAACC,YAAY,CAAC,CAAC;EACvC,CAAC,MAAM;IACLjB,GAAG,CAACC,IAAI,CAACiB,SAAS,EAAEb,IAAI,CAACc,IAAI,CAAChB,GAAG,CAACiB,UAAU,CAAC,CAAC,EAAE,iBAAiB,CAAC,EAAEjB,GAAG,CAACiB,UAAU,CAAC,CAAC,CAAC;IACrFrB,EAAE,CAACsB,OAAO,CAAClB,GAAG,CAACiB,UAAU,CAAC,CAAC,EAAE,UAACE,GAAG,EAAEC,KAAK,EAAK;MAC3C,IAAID,GAAG,EAAE;QACP;MACF;MACAC,KAAK,CAACC,OAAO,CAAC,UAACC,IAAI,EAAK;QACtBzB,GAAG,CAACC,IAAI,CAACwB,IAAI,CAAC;MAChB,CAAC,CAAC;IACJ,CAAC,CAAC;IACFnB,UAAU,CAACS,OAAO,WAAAW,MAAA,CAAWrB,IAAI,CAACc,IAAI,CAAChB,GAAG,CAACiB,UAAU,CAAC,CAAC,EAAE,iBAAiB,CAAC,CAAE,CAAC;EAChF;;EAEA;EACAd,UAAU,CAACqB,EAAE,CAAC,QAAQ,EAAE,YAAM;IAC5B;IACA;IACA;IACArB,UAAU,GAAG,IAAI;EACnB,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACAH,GAAG,CAACwB,EAAE,CAAC,OAAO,EAAEpB,YAAY,CAAC;;AAE7B;AACAJ,GAAG,CAACwB,EAAE,CAAC,mBAAmB,EAAE,YAAM;EAChC;EACA;EACA,IAAInB,OAAO,CAACoB,QAAQ,KAAK,QAAQ,EAAE;IACjCzB,GAAG,CAAC0B,IAAI,CAAC,CAAC;EACZ;AACF,CAAC,CAAC;AAEF1B,GAAG,CAACwB,EAAE,CAAC,UAAU,EAAE,YAAM;EACvB;EACA;EACA,IAAIrB,UAAU,KAAK,IAAI,EAAE;IACvBC,YAAY,CAAC,CAAC;EAChB;AACF,CAAC,CAAC;;AAEF;AACA,uE","sources":["webpack://db-analyzer/external node-commonjs \"electron\"","webpack://db-analyzer/external node-commonjs \"fs\"","webpack://db-analyzer/external node-commonjs \"path\"","webpack://db-analyzer/webpack/bootstrap","webpack://db-analyzer/./electron/main.js"],"sourcesContent":["module.exports = require(\"electron\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const electron = require('electron');\nconst isDev = require('electron-is-dev');\nconst fs = require('fs');\n\nconst log = require('electron-log');\n\nlog.info('Hello, log');\nlog.warn('Some problem appears');\n\n// require(\"electron-reload\")(__dirname);\n// Module to control application life.\nconst { app } = electron;\n// Module to create native browser window.\nconst { BrowserWindow } = electron;\n\nconst path = require('path');\n// const url = require(\"url\");\n\n// const mssql = require(\"mssql\");\n\n// Keep a global reference of the window object, if you don't, the window will\n// be closed automatically when the JavaScript object is garbage collected.\nlet mainWindow;\n\nfunction createWindow() {\n  process.env.ELECTRON_DISABLE_SECURITY_WARNINGS = 'true';\n\n  // Create the browser window.\n  mainWindow = new BrowserWindow({\n    width: 1300,\n    height: 900,\n    webPreferences: {\n      nodeIntegration: true,\n    },\n  });\n\n  log.info('crating window');\n\n  // and load the index.html of the app.\n  if (isDev) {\n    mainWindow.loadURL('http://localhost:4000');\n\n    // Open the DevTools.\n    mainWindow.webContents.openDevTools();\n  } else {\n    log.info(__dirname, path.join(app.getAppPath(), 'dist/index.html'), app.getAppPath());\n    fs.readdir(app.getAppPath(), (err, files) => {\n      if (err) {\n        return;\n      }\n      files.forEach((file) => {\n        log.info(file);\n      });\n    });\n    mainWindow.loadURL(`file://${path.join(app.getAppPath(), 'dist/index.html')}`);\n  }\n\n  // Emitted when the window is closed.\n  mainWindow.on('closed', () => {\n    // Dereference the window object, usually you would store windows\n    // in an array if your app supports multi windows, this is the time\n    // when you should delete the corresponding element.\n    mainWindow = null;\n  });\n}\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.on('ready', createWindow);\n\n// Quit when all windows are closed.\napp.on('window-all-closed', () => {\n  // On OS X it is common for applications and their menu bar\n  // to stay active until the user quits explicitly with Cmd + Q\n  if (process.platform !== 'darwin') {\n    app.quit();\n  }\n});\n\napp.on('activate', () => {\n  // On OS X it's common to re-create a window in the app when the\n  // dock icon is clicked and there are no other windows open.\n  if (mainWindow === null) {\n    createWindow();\n  }\n});\n\n// In this file you can include the rest of your app's specific main process\n// code. You can also put them in separate files and require them here.\n"],"names":["electron","require","isDev","fs","log","info","warn","app","BrowserWindow","path","mainWindow","createWindow","process","env","ELECTRON_DISABLE_SECURITY_WARNINGS","width","height","webPreferences","nodeIntegration","loadURL","webContents","openDevTools","__dirname","join","getAppPath","readdir","err","files","forEach","file","concat","on","platform","quit"],"sourceRoot":""}