{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./electron/main.js","webpack:///./node_modules/electron-is-dev/index.js","webpack:///external \"electron\"","webpack:///external \"path\""],"names":["electron","require","isDev","app","BrowserWindow","path","mainWindow","createWindow","process","env","ELECTRON_DISABLE_SECURITY_WARNINGS","width","height","webPreferences","nodeIntegration","console","log","loadURL","join","__dirname","webContents","openDevTools","on","platform","quit"],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;AClFA,qDAAMA,QAAQ,GAAGC,mBAAO,CAAC,0BAAD,CAAxB;;AACA,IAAMC,KAAK,GAAGD,mBAAO,CAAC,gEAAD,CAArB,C,CAEA;AACA;;;IACQE,G,GAAQH,Q,CAARG,G,EACR;;IACQC,a,GAAkBJ,Q,CAAlBI,a;;AAER,IAAMC,IAAI,GAAGJ,mBAAO,CAAC,kBAAD,CAApB,C,CACA;AAEA;AAEA;AACA;;;AACA,IAAIK,UAAJ;;AAEA,SAASC,YAAT,GAAwB;AAClBC,SAAO,CAACC,GAAR,CAAYC,kCAAZ,GAAiD,MAAjD,CADkB,CAGtB;;AACAJ,YAAU,GAAG,IAAIF,aAAJ,CAAkB;AAC7BO,SAAK,EAAE,IADsB;AAE7BC,UAAM,EAAE,GAFqB;AAG7BC,kBAAc,EAAE;AACdC,qBAAe,EAAE;AADH;AAHa,GAAlB,CAAb;AAQAC,SAAO,CAACC,GAAR,CAAY,gBAAZ,EAZsB,CActB;;AACA,MAAId,KAAJ,EAAW;AACTI,cAAU,CAACW,OAAX,CAAmB,uBAAnB;AACD,GAFD,MAEO;AACLX,cAAU,CAACW,OAAX,kBAA6BZ,IAAI,CAACa,IAAL,CAAUC,SAAV,EAAqB,cAArB,CAA7B;AACD,GAnBqB,CAqBtB;;;AACAb,YAAU,CAACc,WAAX,CAAuBC,YAAvB,GAtBsB,CAwBtB;;AACAf,YAAU,CAACgB,EAAX,CAAc,QAAd,EAAwB,YAAM;AAC5B;AACA;AACA;AACAhB,cAAU,GAAG,IAAb;AACD,GALD;AAMD,C,CAED;AACA;AACA;;;AACAH,GAAG,CAACmB,EAAJ,CAAO,OAAP,EAAgBf,YAAhB,E,CAEA;;AACAJ,GAAG,CAACmB,EAAJ,CAAO,mBAAP,EAA4B,YAAM;AAChC;AACA;AACA,MAAId,OAAO,CAACe,QAAR,KAAqB,QAAzB,EAAmC;AACjCpB,OAAG,CAACqB,IAAJ;AACD;AACF,CAND;AAQArB,GAAG,CAACmB,EAAJ,CAAO,UAAP,EAAmB,YAAM;AACvB;AACA;AACA,MAAIhB,UAAU,KAAK,IAAnB,EAAyB;AACvBC,gBAAY;AACb;AACF,CAND,E,CAQA;AACA,uE;;;;;;;;;;;;;AC1Ea;AACb,iBAAiB,mBAAO,CAAC,0BAAU;;AAEnC;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;;;;;;;;;;;ACZA,qC;;;;;;;;;;;ACAA,iC","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./electron/main.js\");\n","const electron = require('electron');\nconst isDev = require('electron-is-dev');\n\n// require(\"electron-reload\")(__dirname);\n// Module to control application life.\nconst { app } = electron;\n// Module to create native browser window.\nconst { BrowserWindow } = electron;\n\nconst path = require('path');\n// const url = require(\"url\");\n\n// const mssql = require(\"mssql\");\n\n// Keep a global reference of the window object, if you don't, the window will\n// be closed automatically when the JavaScript object is garbage collected.\nlet mainWindow;\n\nfunction createWindow() {\n      process.env.ELECTRON_DISABLE_SECURITY_WARNINGS = 'true';\n\n  // Create the browser window.\n  mainWindow = new BrowserWindow({\n    width: 1300,\n    height: 900,\n    webPreferences: {\n      nodeIntegration: true\n    }\n  });\n\n  console.log('crating window');\n\n  // and load the index.html of the app.\n  if (isDev) {\n    mainWindow.loadURL('http://localhost:4000');\n  } else {\n    mainWindow.loadURL(`file://${path.join(__dirname, './index.html')}`);\n  }\n\n  // Open the DevTools.\n  mainWindow.webContents.openDevTools();\n\n  // Emitted when the window is closed.\n  mainWindow.on('closed', () => {\n    // Dereference the window object, usually you would store windows\n    // in an array if your app supports multi windows, this is the time\n    // when you should delete the corresponding element.\n    mainWindow = null;\n  });\n}\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.on('ready', createWindow);\n\n// Quit when all windows are closed.\napp.on('window-all-closed', () => {\n  // On OS X it is common for applications and their menu bar\n  // to stay active until the user quits explicitly with Cmd + Q\n  if (process.platform !== 'darwin') {\n    app.quit();\n  }\n});\n\napp.on('activate', () => {\n  // On OS X it's common to re-create a window in the app when the\n  // dock icon is clicked and there are no other windows open.\n  if (mainWindow === null) {\n    createWindow();\n  }\n});\n\n// In this file you can include the rest of your app's specific main process\n// code. You can also put them in separate files and require them here.\n","'use strict';\nconst electron = require('electron');\n\nif (typeof electron === 'string') {\n\tthrow new TypeError('Not running in an Electron environment!');\n}\n\nconst app = electron.app || electron.remote.app;\n\nconst isEnvSet = 'ELECTRON_IS_DEV' in process.env;\nconst getFromEnv = parseInt(process.env.ELECTRON_IS_DEV, 10) === 1;\n\nmodule.exports = isEnvSet ? getFromEnv : !app.isPackaged;\n","module.exports = require(\"electron\");","module.exports = require(\"path\");"],"sourceRoot":""}