{"version":3,"file":"main.js","mappings":"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WAAW,IAAI;AAC/B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,aAAa,KAAK;AAClB,eAAe;AACf;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA,cAAc,mBAAmB,EAAE,qBAAqB;AACxD,4BAA4B,0BAA0B;AACtD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,UAAU;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB,aAAa,UAAU;AACvB;AACA,8CAA8C;AAC9C;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC5La;;AAEb,iBAAiB,mBAAO,CAAC,0BAAU;AACnC,4BAA4B,mBAAO,CAAC,0FAAuB;AAC3D,QAAQ,aAAa,EAAE,mBAAO,CAAC,wEAAc;AAC7C,4BAA4B,mBAAO,CAAC,gGAA6B;;AAEjE,8CAA8C,UAAU;AACxD;AACA,kBAAkB,aAAa;AAC/B;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;;AAED,kDAAkD,iBAAiB;AACnE;AACA;AACA,wDAAwD,OAAO;AAC/D;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,uBAAuB,IAAI,qBAAqB;AACvE;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;;;;;;;;;;;;;AC9Ca;;AAEb,WAAW,mBAAO,CAAC,cAAI;AACvB,WAAW,mBAAO,CAAC,cAAI;AACvB,aAAa,mBAAO,CAAC,kBAAM;AAC3B,4BAA4B,mBAAO,CAAC,0GAAkC;;AAEtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA,yCAAyC,qBAAqB;AAC9D;AACA,QAAQ;AACR;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;AACA;AACA,MAAM,SAAS;AACf;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,+BAA+B;AAC1C,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,wCAAwC,qBAAqB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,yBAAyB;AAC9C,OAAO;AACP,KAAK;AACL;AACA;;;;;;;;;;;;AC1Fa;;AAEb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI;AACR;AACA;AACA;AACA,sBAAsB,yCAAyC;AAC/D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI;AACR;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,gDAAgD,aAAa;AAC7D;AACA;AACA;AACA,MAAM;AACN,4BAA4B;AAC5B;AACA;;AAEA,eAAe,yCAAyC;AACxD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,kBAAkB,sBAAsB,IAAI;AAC5C;AACA;AACA;;AAEA;AACA,sBAAsB,qBAAqB;AAC3C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS,QAAQ,GAAG,4CAA4C;AAChE;AACA;;AAEA;AACA,yBAAyB,wBAAwB;AACjD;;AAEA;AACA;AACA;AACA;AACA,yBAAyB,kCAAkC;AAC3D;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,mDAAmD,UAAU,IAAI,OAAO;AACxE;AACA;;AAEA,4CAA4C,UAAU;AACtD;;AAEA;;;;;;;;;;;;ACrIa;;AAEb;AACA;AACA,aAAa,YAAY,EAAE,UAAU;AACrC;AACA;AACA,8BAA8B,MAAM;AACpC;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,+BAA+B,MAAM;AACrC;AACA,OAAO;AACP,gCAAgC,8BAA8B;AAC9D;AACA,cAAc;AACd;AACA,OAAO;AACP,KAAK;;AAEL;AACA,4BAA4B,wCAAwC;AACpE;AACA;AACA;AACA;;AAEA,iBAAiB,oBAAoB,SAAS,GAAG,KAAK;AACtD,OAAO;AACP,0BAA0B,MAAM;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,sCAAsC,MAAM;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,2BAA2B,MAAM;AACjC;AACA,OAAO;AACP,0BAA0B,MAAM;AAChC;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA,0BAA0B;AAC1B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,2BAA2B;AAC3B;;AAEA;;AAEA;AACA;AACA;AACA,6BAA6B,4CAA4C;AACzE,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,oDAAoD;AACpE;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,mBAAmB,qCAAqC;AACxD;AACA;AACA,2BAA2B,qCAAqC;AAChE;;AAEA;AACA;AACA;AACA,kCAAkC,qCAAqC;AACvE;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iBAAiB,YAAY;AAC7B,iBAAiB,UAAU;;AAE3B;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,MAAM;AACN;AACA;AACA;;AAEA,gBAAgB,qCAAqC;AACrD,sCAAsC,qCAAqC;AAC3E;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACtPa;;AAEb;;AAEA,qBAAqB,mBAAO,CAAC,oCAAe;AAC5C,WAAW,mBAAO,CAAC,cAAI;AACvB,aAAa,mBAAO,CAAC,kBAAM;AAC3B,oBAAoB,mBAAO,CAAC,0EAAe;;AAE3C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,YAAY;AAC/B;;AAEA;AACA;;AAEA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,cAAc,QAAQ,EAAE,UAAU;AAClC;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,cAAc,mBAAmB,EAAE,qBAAqB;AACxD;AACA;AACA;AACA;;AAEA;AACA,WAAW,KAAsC;AACjD,SAAS,CAAmC;AAC5C;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,UAAU;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB,aAAa,UAAU;AACvB;AACA,8CAA8C;AAC9C,uBAAuB;AACvB;AACA,yBAAyB,OAAO,EAAE,IAAI,KAAK;AAC3C;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC/Na;;AAEb,eAAe,mBAAO,CAAC,sEAAgB;AACvC,qBAAqB,mBAAO,CAAC,4EAAgB;AAC7C,oBAAoB,mBAAO,CAAC,0EAAe;AAC3C,yBAAyB,mBAAO,CAAC,wFAAsB;AACvD,sBAAsB,mBAAO,CAAC,wFAAmB;AACjD,qBAAqB,mBAAO,CAAC,gFAAkB;AAC/C,wBAAwB,mBAAO,CAAC,sFAAqB;;AAErD;;AAEA,+BAA+B,4BAA4B;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;;;;;;;;;;;;AC5Ca;;AAEb,wBAAwB,mBAAO,CAAC,kFAAmB;AACnD,4BAA4B,mBAAO,CAAC,0FAAuB;;AAE3D;;AAEA;AACA,kBAAkB,aAAa;AAC/B,CAAC;;AAED;;;;;;;;;;;;ACXa;;AAEb,WAAW,mBAAO,CAAC,cAAI;AACvB,aAAa,mBAAO,CAAC,kBAAM;;AAE3B;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,WAAW,WAAW;AACtB,cAAc,kCAAkC;AAChD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe;AACf;;AAEA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,4CAAY;AACvB,IAAI;AACJ;AACA;AACA;;;;;;;;;;;;ACvGa;;AAEb,QAAQ,YAAY,EAAE,mBAAO,CAAC,iFAAa;;AAE3C;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAW,kDAAkD;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,YAAY;AACZ;AACA,qCAAqC,MAAM;AAC3C;AACA;AACA;;AAEA;AACA;AACA;;AAEA,aAAa,SAAS,EAAE,QAAQ;AAChC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AACL;AACA;;AAEA,6BAA6B,0BAA0B;AACvD;AACA;AACA;;AAEA,mBAAmB,4BAA4B;AAC/C;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,UAAU,qBAAqB;AAC/B;AACA;AACA;AACA;;AAEA;AACA,gBAAgB;AAChB;AACA;;;;;;;;;;;;ACpFa;;AAEb,qBAAqB,mBAAO,CAAC,sBAAQ;AACrC,WAAW,mBAAO,CAAC,cAAI;AACvB,WAAW,mBAAO,CAAC,cAAI;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,0CAA0C;AAC/D;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qCAAqC,OAAO,EAAE,QAAQ;AACtD,MAAM;AACN;AACA;AACA,wCAAwC,UAAU,IAAI,UAAU;AAChE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,yCAAyC,UAAU,IAAI,UAAU;AACjE;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,uCAAuC,UAAU,IAAI,UAAU;AAC/D;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;AC7Ja;;AAEb,qBAAqB,mBAAO,CAAC,sBAAQ;AACrC,WAAW,mBAAO,CAAC,cAAI;AACvB,aAAa,mBAAO,CAAC,kBAAM;AAC3B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","sources":["webpack://db-analyzer/./electron/main.js","webpack://db-analyzer/./node_modules/electron-log/src/core/Logger.js","webpack://db-analyzer/./node_modules/electron-log/src/core/scope.js","webpack://db-analyzer/./node_modules/electron-log/src/index.js","webpack://db-analyzer/./node_modules/electron-log/src/main/ElectronExternalApi.js","webpack://db-analyzer/./node_modules/electron-log/src/main/index.js","webpack://db-analyzer/./node_modules/electron-log/src/main/initialize.js","webpack://db-analyzer/./node_modules/electron-log/src/node/ErrorHandler.js","webpack://db-analyzer/./node_modules/electron-log/src/node/EventLogger.js","webpack://db-analyzer/./node_modules/electron-log/src/node/NodeExternalApi.js","webpack://db-analyzer/./node_modules/electron-log/src/node/createDefaultLogger.js","webpack://db-analyzer/./node_modules/electron-log/src/node/index.js","webpack://db-analyzer/./node_modules/electron-log/src/node/packageJson.js","webpack://db-analyzer/./node_modules/electron-log/src/node/transforms/format.js","webpack://db-analyzer/./node_modules/electron-log/src/node/transforms/object.js","webpack://db-analyzer/./node_modules/electron-log/src/node/transforms/style.js","webpack://db-analyzer/./node_modules/electron-log/src/node/transforms/transform.js","webpack://db-analyzer/./node_modules/electron-log/src/node/transports/console.js","webpack://db-analyzer/./node_modules/electron-log/src/node/transports/file/File.js","webpack://db-analyzer/./node_modules/electron-log/src/node/transports/file/FileRegistry.js","webpack://db-analyzer/./node_modules/electron-log/src/node/transports/file/NullFile.js","webpack://db-analyzer/./node_modules/electron-log/src/node/transports/file/index.js","webpack://db-analyzer/./node_modules/electron-log/src/node/transports/ipc.js","webpack://db-analyzer/./node_modules/electron-log/src/node/transports/remote.js","webpack://db-analyzer/./node_modules/electron-log/src/renderer/electron-log-preload.js","webpack://db-analyzer/./node_modules/electron-log/src/renderer/index.js","webpack://db-analyzer/./node_modules/electron-log/src/renderer/lib/RendererErrorHandler.js","webpack://db-analyzer/./node_modules/electron-log/src/renderer/lib/transports/console.js","webpack://db-analyzer/./node_modules/electron-log/src/renderer/lib/transports/ipc.js","webpack://db-analyzer/external node-commonjs \"child_process\"","webpack://db-analyzer/external node-commonjs \"electron\"","webpack://db-analyzer/external node-commonjs \"events\"","webpack://db-analyzer/external node-commonjs \"fs\"","webpack://db-analyzer/external node-commonjs \"http\"","webpack://db-analyzer/external node-commonjs \"https\"","webpack://db-analyzer/external node-commonjs \"os\"","webpack://db-analyzer/external node-commonjs \"path\"","webpack://db-analyzer/external node-commonjs \"util\"","webpack://db-analyzer/./node_modules/electron-is-dev/index.js","webpack://db-analyzer/webpack/bootstrap","webpack://db-analyzer/webpack/runtime/define property getters","webpack://db-analyzer/webpack/runtime/hasOwnProperty shorthand","webpack://db-analyzer/webpack/runtime/make namespace object","webpack://db-analyzer/webpack/before-startup","webpack://db-analyzer/webpack/startup","webpack://db-analyzer/webpack/after-startup"],"sourcesContent":["const electron = require('electron');\nconst isDev = require('electron-is-dev');\nconst log = require('electron-log');\nconst fs = require('fs');\n\nlog.info('Hello, log');\nlog.warn('Some problem appears');\n\n// require(\"electron-reload\")(__dirname);\n// Module to control application life.\nconst { app } = electron;\n// Module to create native browser window.\nconst { BrowserWindow } = electron;\n\nconst path = require('path');\n// const url = require(\"url\");\n\n// const mssql = require(\"mssql\");\n\n// Keep a global reference of the window object, if you don't, the window will\n// be closed automatically when the JavaScript object is garbage collected.\nlet mainWindow;\n\nfunction createWindow() {\n  process.env.ELECTRON_DISABLE_SECURITY_WARNINGS = 'true';\n\n  // Create the browser window.\n  mainWindow = new BrowserWindow({\n    width: 1300,\n    height: 900,\n    webPreferences: {\n      nodeIntegration: true,\n    },\n  });\n\n  log.info('creating window');\n\n  // and load the index.html of the app.\n  if (isDev) {\n    mainWindow.loadURL('http://localhost:4000');\n\n    // Open the DevTools.\n    mainWindow.webContents.openDevTools();\n  } else {\n    log.info(__dirname, path.join(app.getAppPath(), 'dist/index.html'), app.getAppPath());\n    fs.readdir(app.getAppPath(), (err, files) => {\n      if (err) {\n        return;\n      }\n      files.forEach((file) => {\n        log.info(file);\n      });\n    });\n    mainWindow.loadURL(`file://${path.join(app.getAppPath(), 'dist/index.html')}`);\n  }\n\n  // Emitted when the window is closed.\n  mainWindow.on('closed', () => {\n    // Dereference the window object, usually you would store windows\n    // in an array if your app supports multi windows, this is the time\n    // when you should delete the corresponding element.\n    mainWindow = null;\n  });\n}\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.on('ready', createWindow);\n\n// Quit when all windows are closed.\napp.on('window-all-closed', () => {\n  // On OS X it is common for applications and their menu bar\n  // to stay active until the user quits explicitly with Cmd + Q\n  if (process.platform !== 'darwin') {\n    app.quit();\n  }\n});\n\napp.on('activate', () => {\n  // On OS X it's common to re-create a window in the app when the\n  // dock icon is clicked and there are no other windows open.\n  if (mainWindow === null) {\n    createWindow();\n  }\n});\n\n// In this file you can include the rest of your app's specific main process\n// code. You can also put them in separate files and require them here.\n","'use strict';\n\nconst scopeFactory = require('./scope');\n\n/**\n * @property {Function} error\n * @property {Function} warn\n * @property {Function} info\n * @property {Function} verbose\n * @property {Function} debug\n * @property {Function} silly\n */\nclass Logger {\n  static instances = {};\n\n  dependencies = {};\n  errorHandler = null;\n  eventLogger = null;\n  functions = {};\n  hooks = [];\n  isDev = false;\n  levels = null;\n  logId = null;\n  scope = null;\n  transports = {};\n  variables = {};\n\n  constructor({\n    allowUnknownLevel = false,\n    dependencies = {},\n    errorHandler,\n    eventLogger,\n    initializeFn,\n    isDev = false,\n    levels = ['error', 'warn', 'info', 'verbose', 'debug', 'silly'],\n    logId,\n    transportFactories = {},\n    variables,\n  } = {}) {\n    this.addLevel = this.addLevel.bind(this);\n    this.create = this.create.bind(this);\n    this.initialize = this.initialize.bind(this);\n    this.logData = this.logData.bind(this);\n    this.processMessage = this.processMessage.bind(this);\n\n    this.allowUnknownLevel = allowUnknownLevel;\n    this.dependencies = dependencies;\n    this.initializeFn = initializeFn;\n    this.isDev = isDev;\n    this.levels = levels;\n    this.logId = logId;\n    this.transportFactories = transportFactories;\n    this.variables = variables || {};\n    this.scope = scopeFactory(this);\n\n    for (const name of this.levels) {\n      this.addLevel(name, false);\n    }\n    this.log = this.info;\n    this.functions.log = this.log;\n\n    this.errorHandler = errorHandler;\n    errorHandler?.setOptions({ ...dependencies, logFn: this.error });\n\n    this.eventLogger = eventLogger;\n    eventLogger?.setOptions({ ...dependencies, logger: this });\n\n    for (const [name, factory] of Object.entries(transportFactories)) {\n      this.transports[name] = factory(this, dependencies);\n    }\n\n    Logger.instances[logId] = this;\n  }\n\n  static getInstance({ logId }) {\n    return this.instances[logId] || this.instances.default;\n  }\n\n  addLevel(level, index = this.levels.length) {\n    if (index !== false) {\n      this.levels.splice(index, 0, level);\n    }\n\n    this[level] = (...args) => this.logData(args, { level });\n    this.functions[level] = this[level];\n  }\n\n  catchErrors(options) {\n    this.processMessage(\n      {\n        data: ['log.catchErrors is deprecated. Use log.errorHandler instead'],\n        level: 'warn',\n      },\n      { transports: ['console'] },\n    );\n    return this.errorHandler.startCatching(options);\n  }\n\n  create(options) {\n    if (typeof options === 'string') {\n      options = { logId: options };\n    }\n\n    return new Logger({\n      dependencies: this.dependencies,\n      errorHandler: this.errorHandler,\n      initializeFn: this.initializeFn,\n      isDev: this.isDev,\n      transportFactories: this.transportFactories,\n      variables: { ...this.variables },\n      ...options,\n    });\n  }\n\n  compareLevels(passLevel, checkLevel, levels = this.levels) {\n    const pass = levels.indexOf(passLevel);\n    const check = levels.indexOf(checkLevel);\n\n    if (check === -1 || pass === -1) {\n      return true;\n    }\n\n    return check <= pass;\n  }\n\n  initialize(options = {}) {\n    this.initializeFn({ logger: this, ...this.dependencies, ...options });\n  }\n\n  logData(data, options = {}) {\n    this.processMessage({ data, ...options });\n  }\n\n  processMessage(message, { transports = this.transports } = {}) {\n    if (message.cmd === 'errorHandler') {\n      this.errorHandler.handle(message.error, {\n        errorName: message.errorName,\n        processType: 'renderer',\n        showDialog: Boolean(message.showDialog),\n      });\n      return;\n    }\n\n    let level = message.level;\n    if (!this.allowUnknownLevel) {\n      level = this.levels.includes(message.level) ? message.level : 'info';\n    }\n\n    const normalizedMessage = {\n      date: new Date(),\n      ...message,\n      level,\n      variables: {\n        ...this.variables,\n        ...message.variables,\n      },\n    };\n\n    for (const [transName, transFn] of this.transportEntries(transports)) {\n      if (typeof transFn !== 'function' || transFn.level === false) {\n        continue;\n      }\n\n      if (!this.compareLevels(transFn.level, message.level)) {\n        continue;\n      }\n\n      try {\n        // eslint-disable-next-line arrow-body-style\n        const transformedMsg = this.hooks.reduce((msg, hook) => {\n          return msg ? hook(msg, transFn, transName) : msg;\n        }, normalizedMessage);\n\n        if (transformedMsg) {\n          transFn({ ...transformedMsg, data: [...transformedMsg.data] });\n        }\n      } catch (e) {\n        this.processInternalErrorFn(e);\n      }\n    }\n  }\n\n  processInternalErrorFn(_e) {\n    // Do nothing by default\n  }\n\n  transportEntries(transports = this.transports) {\n    const transportArray = Array.isArray(transports)\n      ? transports\n      : Object.entries(transports);\n\n    return transportArray\n      .map((item) => {\n        switch (typeof item) {\n          case 'string':\n            return this.transports[item] ? [item, this.transports[item]] : null;\n          case 'function':\n            return [item.name, item];\n          default:\n            return Array.isArray(item) ? item : null;\n        }\n      })\n      .filter(Boolean);\n  }\n}\n\nmodule.exports = Logger;\n","'use strict';\n\nmodule.exports = scopeFactory;\n\nfunction scopeFactory(logger) {\n  return Object.defineProperties(scope, {\n    defaultLabel: { value: '', writable: true },\n    labelPadding: { value: true, writable: true },\n    maxLabelLength: { value: 0, writable: true },\n    labelLength: {\n      get() {\n        switch (typeof scope.labelPadding) {\n          case 'boolean': return scope.labelPadding ? scope.maxLabelLength : 0;\n          case 'number': return scope.labelPadding;\n          default: return 0;\n        }\n      },\n    },\n  });\n\n  function scope(label) {\n    scope.maxLabelLength = Math.max(scope.maxLabelLength, label.length);\n\n    const newScope = {};\n    for (const level of [...logger.levels, 'log']) {\n      newScope[level] = (...d) => logger.logData(d, { level, scope: label });\n    }\n    return newScope;\n  }\n}\n","'use strict';\n\n/* eslint-disable global-require */\n\nconst isRenderer = typeof process === 'undefined'\n  || (process.type === 'renderer' || process.type === 'worker');\n\nconst isMain = typeof process === 'object' && process.type === 'browser';\n\nif (isRenderer) {\n  // Makes sense when contextIsolation/sandbox disabled\n  require('./renderer/electron-log-preload');\n  module.exports = require('./renderer');\n} else if (isMain) {\n  module.exports = require('./main');\n} else {\n  module.exports = require('./node');\n}\n","'use strict';\n\nconst path = require('path');\nconst NodeExternalApi = require('../node/NodeExternalApi');\n\nclass ElectronExternalApi extends NodeExternalApi {\n  /**\n   * @type {typeof Electron}\n   */\n  electron = undefined;\n\n  /**\n   * @param {object} options\n   * @param {typeof Electron} [options.electron]\n   */\n  constructor({ electron } = {}) {\n    super();\n    this.electron = electron;\n  }\n\n  getAppName() {\n    let appName;\n    try {\n      appName = this.appName\n        || this.electron.app?.name\n        || this.electron.app?.getName();\n    } catch {\n      // fallback to default value below\n    }\n    return appName || super.getAppName();\n  }\n\n  getAppUserDataPath(appName) {\n    return this.getPath('userData') || super.getAppUserDataPath(appName);\n  }\n\n  getAppVersion() {\n    let appVersion;\n    try {\n      appVersion = this.electron.app?.getVersion();\n    } catch {\n      // fallback to default value below\n    }\n    return appVersion || super.getAppVersion();\n  }\n\n  getElectronLogPath() {\n    return this.getPath('logs') || super.getElectronLogPath();\n  }\n\n  /**\n   * @private\n   * @param {any} name\n   * @returns {string|undefined}\n   */\n  getPath(name) {\n    try {\n      return this.electron.app?.getPath(name);\n    } catch {\n      return undefined;\n    }\n  }\n\n  getVersions() {\n    return {\n      app: `${this.getAppName()} ${this.getAppVersion()}`,\n      electron: `Electron ${process.versions.electron}`,\n      os: this.getOsVersion(),\n    };\n  }\n\n  getSystemPathAppData() {\n    return this.getPath('appData') || super.getSystemPathAppData();\n  }\n\n  isDev() {\n    if (this.electron.app?.isPackaged !== undefined) {\n      return !this.electron.app.isPackaged;\n    }\n\n    if (typeof process.execPath === 'string') {\n      const execFileName = path.basename(process.execPath).toLowerCase();\n      return execFileName.startsWith('electron');\n    }\n\n    return super.isDev();\n  }\n\n  onAppEvent(eventName, handler) {\n    this.electron.app?.on(eventName, handler);\n\n    return () => {\n      this.electron.app?.off(eventName, handler);\n    };\n  }\n\n  onAppReady(handler) {\n    if (this.electron.app?.isReady()) {\n      handler();\n    } else if (this.electron.app?.once) {\n      this.electron.app?.once('ready', handler);\n    } else {\n      handler();\n    }\n  }\n\n  onEveryWebContentsEvent(eventName, handler) {\n    this.electron.webContents?.getAllWebContents()?.forEach((webContents) => {\n      webContents.on(eventName, handler);\n    });\n\n    this.electron.app?.on('web-contents-created', onWebContentsCreated);\n\n    return () => {\n      this.electron.webContents?.getAllWebContents().forEach((webContents) => {\n        webContents.off(eventName, handler);\n      });\n\n      this.electron.app?.off('web-contents-created', onWebContentsCreated);\n    };\n\n    function onWebContentsCreated(_, webContents) {\n      webContents.on(eventName, handler);\n    }\n  }\n\n  /**\n   * Listen to async messages sent from opposite process\n   * @param {string} channel\n   * @param {function} listener\n   */\n  onIpc(channel, listener) {\n    this.electron.ipcMain?.on(channel, listener);\n  }\n\n  onIpcInvoke(channel, listener) {\n    this.electron.ipcMain?.handle?.(channel, listener);\n  }\n\n  /**\n   * @param {string} url\n   * @param {Function} [logFunction]\n   */\n  openUrl(url, logFunction = console.error) { // eslint-disable-line no-console\n    this.electron.shell?.openExternal(url).catch(logFunction);\n  }\n\n  setPreloadFileForSessions({\n    filePath,\n    includeFutureSession = true,\n    getSessions = () => [this.electron.session?.defaultSession],\n  }) {\n    for (const session of getSessions().filter(Boolean)) {\n      setPreload(session);\n    }\n\n    if (includeFutureSession) {\n      this.onAppEvent('session-created', (session) => {\n        setPreload(session);\n      });\n    }\n\n    /**\n     * @param {Session} session\n     */\n    function setPreload(session) {\n      session.setPreloads([...session.getPreloads(), filePath]);\n    }\n  }\n\n  /**\n   * Sent a message to opposite process\n   * @param {string} channel\n   * @param {any} message\n   */\n  sendIpc(channel, message) {\n    this.electron.BrowserWindow?.getAllWindows()?.forEach((wnd) => {\n      if (wnd.webContents?.isDestroyed() === false) {\n        wnd.webContents.send(channel, message);\n      }\n    });\n  }\n\n  showErrorBox(title, message) {\n    this.electron.dialog?.showErrorBox(title, message);\n  }\n}\n\nmodule.exports = ElectronExternalApi;\n","'use strict';\n\nconst electron = require('electron');\nconst ElectronExternalApi = require('./ElectronExternalApi');\nconst { initialize } = require('./initialize');\nconst createDefaultLogger = require('../node/createDefaultLogger');\n\nconst externalApi = new ElectronExternalApi({ electron });\nconst defaultLogger = createDefaultLogger({\n  dependencies: { externalApi },\n  initializeFn: initialize,\n});\n\nmodule.exports = defaultLogger;\n\nexternalApi.onIpc('__ELECTRON_LOG__', (_, message) => {\n  if (message.scope) {\n    defaultLogger.Logger.getInstance(message).scope(message.scope);\n  }\n\n  const date = new Date(message.date);\n  processMessage({\n    ...message,\n    date: date.getTime() ? date : new Date(),\n  });\n});\n\nexternalApi.onIpcInvoke('__ELECTRON_LOG__', (_, { cmd = '', logId }) => {\n  switch (cmd) {\n    case 'getOptions': {\n      const logger = defaultLogger.Logger.getInstance({ logId });\n      return {\n        levels: logger.levels,\n        logId,\n      };\n    }\n\n    default: {\n      processMessage({ data: [`Unknown cmd '${cmd}'`], level: 'error' });\n      return {};\n    }\n  }\n});\n\nfunction processMessage(message) {\n  defaultLogger.Logger.getInstance(message)?.processMessage(message);\n}\n","'use strict';\n\nconst fs = require('fs');\nconst os = require('os');\nconst path = require('path');\nconst preloadInitializeFn = require('../renderer/electron-log-preload');\n\nmodule.exports = {\n  initialize({\n    externalApi,\n    getSessions,\n    includeFutureSession,\n    logger,\n    preload = true,\n    spyRendererConsole = false,\n  }) {\n    externalApi.onAppReady(() => {\n      try {\n        if (preload) {\n          initializePreload({\n            externalApi,\n            getSessions,\n            includeFutureSession,\n            preloadOption: preload,\n          });\n        }\n\n        if (spyRendererConsole) {\n          initializeSpyRendererConsole({ externalApi, logger });\n        }\n      } catch (err) {\n        logger.warn(err);\n      }\n    });\n  },\n};\n\nfunction initializePreload({\n  externalApi,\n  getSessions,\n  includeFutureSession,\n  preloadOption,\n}) {\n  let preloadPath = typeof preloadOption === 'string'\n    ? preloadOption\n    : undefined;\n\n  try {\n    preloadPath = path.resolve(\n      __dirname,\n      '../renderer/electron-log-preload.js',\n    );\n  } catch {\n    // Ignore, the file is bundled to ESM\n  }\n\n  if (!preloadPath || !fs.existsSync(preloadPath)) {\n    preloadPath = path.join(\n      externalApi.getAppUserDataPath() || os.tmpdir(),\n      'electron-log-preload.js',\n    );\n    const preloadCode = `\n      try {\n        (${preloadInitializeFn.toString()})(require('electron'));\n      } catch(e) {\n        console.error(e);\n      }\n    `;\n    fs.writeFileSync(preloadPath, preloadCode, 'utf8');\n  }\n\n  externalApi.setPreloadFileForSessions({\n    filePath: preloadPath,\n    includeFutureSession,\n    getSessions,\n  });\n}\n\nfunction initializeSpyRendererConsole({ externalApi, logger }) {\n  const levels = ['verbose', 'info', 'warning', 'error'];\n  externalApi.onEveryWebContentsEvent(\n    'console-message',\n    (event, level, message) => {\n      logger.processMessage({\n        data: [message],\n        level: levels[level],\n        variables: { processType: 'renderer' },\n      });\n    },\n  );\n}\n","'use strict';\n\nclass ErrorHandler {\n  externalApi = undefined;\n  isActive = false;\n  logFn = undefined;\n  onError = undefined;\n  showDialog = true;\n\n  constructor({\n    externalApi,\n    logFn = undefined,\n    onError = undefined,\n    showDialog = undefined,\n  } = {}) {\n    this.createIssue = this.createIssue.bind(this);\n    this.handleError = this.handleError.bind(this);\n    this.handleRejection = this.handleRejection.bind(this);\n    this.setOptions({ externalApi, logFn, onError, showDialog });\n    this.startCatching = this.startCatching.bind(this);\n    this.stopCatching = this.stopCatching.bind(this);\n  }\n\n  handle(error, {\n    logFn = this.logFn,\n    onError = this.onError,\n    processType = 'browser',\n    showDialog = this.showDialog,\n    errorName = '',\n  } = {}) {\n    error = normalizeError(error);\n\n    try {\n      if (typeof onError === 'function') {\n        const versions = this.externalApi?.getVersions() || {};\n        const createIssue = this.createIssue;\n        const result = onError({\n          createIssue,\n          error,\n          errorName,\n          processType,\n          versions,\n        });\n        if (result === false) {\n          return;\n        }\n      }\n\n      errorName ? logFn(errorName, error) : logFn(error);\n\n      if (showDialog && !errorName.includes('rejection') && this.externalApi) {\n        this.externalApi.showErrorBox(\n          `A JavaScript error occurred in the ${processType} process`,\n          error.stack,\n        );\n      }\n    } catch {\n      console.error(error); // eslint-disable-line no-console\n    }\n  }\n\n  setOptions({ externalApi, logFn, onError, showDialog }) {\n    if (typeof externalApi === 'object') {\n      this.externalApi = externalApi;\n    }\n\n    if (typeof logFn === 'function') {\n      this.logFn = logFn;\n    }\n\n    if (typeof onError === 'function') {\n      this.onError = onError;\n    }\n\n    if (typeof showDialog === 'boolean') {\n      this.showDialog = showDialog;\n    }\n  }\n\n  startCatching({ onError, showDialog } = {}) {\n    if (this.isActive) {\n      return;\n    }\n\n    this.isActive = true;\n    this.setOptions({ onError, showDialog });\n    process.on('uncaughtException', this.handleError);\n    process.on('unhandledRejection', this.handleRejection);\n  }\n\n  stopCatching() {\n    this.isActive = false;\n    process.removeListener('uncaughtException', this.handleError);\n    process.removeListener('unhandledRejection', this.handleRejection);\n  }\n\n  createIssue(pageUrl, queryParams) {\n    this.externalApi?.openUrl(\n      `${pageUrl}?${new URLSearchParams(queryParams).toString()}`,\n    );\n  }\n\n  handleError(error) {\n    this.handle(error, { errorName: 'Unhandled' });\n  }\n\n  handleRejection(reason) {\n    const error = reason instanceof Error\n      ? reason\n      : new Error(JSON.stringify(reason));\n    this.handle(error, { errorName: 'Unhandled rejection' });\n  }\n}\n\nfunction normalizeError(e) {\n  if (e instanceof Error) {\n    return e;\n  }\n\n  if (e && typeof e === 'object') {\n    if (e.message) {\n      return Object.assign(new Error(e.message), e);\n    }\n    try {\n      return new Error(JSON.stringify(e));\n    } catch (serErr) {\n      return new Error(`Couldn't normalize error ${String(e)}: ${serErr}`);\n    }\n  }\n\n  return new Error(`Can't normalize error ${String(e)}`);\n}\n\nmodule.exports = ErrorHandler;\n","'use strict';\n\nclass EventLogger {\n  disposers = [];\n  format = '{eventSource}#{eventName}:';\n  formatters = {\n    app: {\n      'certificate-error': ({ args }) => {\n        return this.arrayToObject(args.slice(1, 4), [\n          'url',\n          'error',\n          'certificate',\n        ]);\n      },\n      'child-process-gone': ({ args }) => {\n        return args.length === 1 ? args[0] : args;\n      },\n      'render-process-gone': ({ args: [webContents, details] }) => {\n        return details && typeof details === 'object'\n          ? { ...details, ...this.getWebContentsDetails(webContents) }\n          : [];\n      },\n    },\n\n    webContents: {\n      'console-message': ({ args: [level, message, line, sourceId] }) => {\n        // 0: debug, 1: info, 2: warning, 3: error\n        if (level < 3) {\n          return undefined;\n        }\n\n        return { message, source: `${sourceId}:${line}` };\n      },\n      'did-fail-load': ({ args }) => {\n        return this.arrayToObject(args, [\n          'errorCode',\n          'errorDescription',\n          'validatedURL',\n          'isMainFrame',\n          'frameProcessId',\n          'frameRoutingId',\n        ]);\n      },\n      'did-fail-provisional-load': ({ args }) => {\n        return this.arrayToObject(args, [\n          'errorCode',\n          'errorDescription',\n          'validatedURL',\n          'isMainFrame',\n          'frameProcessId',\n          'frameRoutingId',\n        ]);\n      },\n      'plugin-crashed': ({ args }) => {\n        return this.arrayToObject(args, ['name', 'version']);\n      },\n      'preload-error': ({ args }) => {\n        return this.arrayToObject(args, ['preloadPath', 'error']);\n      },\n    },\n  };\n\n  events = {\n    app: {\n      'certificate-error': true,\n      'child-process-gone': true,\n      'render-process-gone': true,\n    },\n\n    webContents: {\n      // 'console-message': true,\n      'did-fail-load': true,\n      'did-fail-provisional-load': true,\n      'plugin-crashed': true,\n      'preload-error': true,\n      'unresponsive': true,\n    },\n  };\n\n  externalApi = undefined;\n  level = 'error';\n  scope = '';\n\n  constructor(options = {}) {\n    this.setOptions(options);\n  }\n\n  setOptions({\n    events,\n    externalApi,\n    level,\n    logger,\n    format,\n    formatters,\n    scope,\n  }) {\n    if (typeof events === 'object') {\n      this.events = events;\n    }\n\n    if (typeof externalApi === 'object') {\n      this.externalApi = externalApi;\n    }\n\n    if (typeof level === 'string') {\n      this.level = level;\n    }\n\n    if (typeof logger === 'object') {\n      this.logger = logger;\n    }\n\n    if (typeof format === 'string' || typeof format === 'function') {\n      this.format = format;\n    }\n\n    if (typeof formatters === 'object') {\n      this.formatters = formatters;\n    }\n\n    if (typeof scope === 'string') {\n      this.scope = scope;\n    }\n  }\n\n  startLogging(options = {}) {\n    this.setOptions(options);\n\n    this.disposeListeners();\n\n    for (const eventName of this.getEventNames(this.events.app)) {\n      this.disposers.push(\n        this.externalApi.onAppEvent(eventName, (...handlerArgs) => {\n          this.handleEvent({ eventSource: 'app', eventName, handlerArgs });\n        }),\n      );\n    }\n\n    for (const eventName of this.getEventNames(this.events.webContents)) {\n      this.disposers.push(\n        this.externalApi.onEveryWebContentsEvent(\n          eventName,\n          (...handlerArgs) => {\n            this.handleEvent(\n              { eventSource: 'webContents', eventName, handlerArgs },\n            );\n          },\n        ),\n      );\n    }\n  }\n\n  stopLogging() {\n    this.disposeListeners();\n  }\n\n  arrayToObject(array, fieldNames) {\n    const obj = {};\n\n    fieldNames.forEach((fieldName, index) => {\n      obj[fieldName] = array[index];\n    });\n\n    if (array.length > fieldNames.length) {\n      obj.unknownArgs = array.slice(fieldNames.length);\n    }\n\n    return obj;\n  }\n\n  disposeListeners() {\n    this.disposers.forEach((disposer) => disposer());\n    this.disposers = [];\n  }\n\n  formatEventLog({ eventName, eventSource, handlerArgs }) {\n    const [event, ...args] = handlerArgs;\n    if (typeof this.format === 'function') {\n      return this.format({ args, event, eventName, eventSource });\n    }\n\n    const formatter = this.formatters[eventSource]?.[eventName];\n    let formattedArgs = args;\n    if (typeof formatter === 'function') {\n      formattedArgs = formatter({ args, event, eventName, eventSource });\n    }\n\n    if (!formattedArgs) {\n      return undefined;\n    }\n\n    const eventData = {};\n\n    if (Array.isArray(formattedArgs)) {\n      eventData.args = formattedArgs;\n    } else if (typeof formattedArgs === 'object') {\n      Object.assign(eventData, formattedArgs);\n    }\n\n    if (eventSource === 'webContents') {\n      Object.assign(eventData, this.getWebContentsDetails(event?.sender));\n    }\n\n    const title = this.format\n      .replace('{eventSource}', eventSource === 'app' ? 'App' : 'WebContents')\n      .replace('{eventName}', eventName);\n\n    return [title, eventData];\n  }\n\n  getEventNames(eventMap) {\n    if (!eventMap || typeof eventMap !== 'object') {\n      return [];\n    }\n\n    return Object.entries(eventMap)\n      .filter(([_, listen]) => listen)\n      .map(([eventName]) => eventName);\n  }\n\n  getWebContentsDetails(webContents) {\n    if (!webContents?.loadURL) {\n      return {};\n    }\n\n    try {\n      return {\n        webContents: {\n          id: webContents.id,\n          url: webContents.getURL(),\n        },\n      };\n    } catch {\n      return {};\n    }\n  }\n\n  handleEvent({ eventName, eventSource, handlerArgs }) {\n    const log = this.formatEventLog({ eventName, eventSource, handlerArgs });\n    if (log) {\n      const logFns = this.scope ? this.logger.scope(this.scope) : this.logger;\n      logFns?.[this.level]?.(...log);\n    }\n  }\n}\n\nmodule.exports = EventLogger;\n","'use strict';\n\n/* eslint-disable no-unused-vars */\n\nconst childProcess = require('child_process');\nconst os = require('os');\nconst path = require('path');\nconst packageJson = require('./packageJson');\n\nclass NodeExternalApi {\n  appName = undefined;\n  appPackageJson = undefined;\n  platform = process.platform;\n\n  getAppLogPath(appName = this.getAppName()) {\n    if (this.platform === 'darwin') {\n      return path.join(this.getSystemPathHome(), 'Library/Logs', appName);\n    }\n\n    return path.join(this.getAppUserDataPath(appName), 'logs');\n  }\n\n  getAppName() {\n    const appName = this.appName || this.getAppPackageJson()?.name;\n    if (!appName) {\n      throw new Error(\n        'electron-log can\\'t determine the app name. It tried these methods:\\n'\n        + '1. Use `electron.app.name`\\n'\n        + '2. Use productName or name from the nearest package.json`\\n'\n        + 'You can also set it through log.transports.file.setAppName()',\n      );\n    }\n\n    return appName;\n  }\n\n  /**\n   * @private\n   * @returns {undefined}\n   */\n  getAppPackageJson() {\n    if (typeof this.appPackageJson !== 'object') {\n      this.appPackageJson = packageJson.findAndReadPackageJson();\n    }\n\n    return this.appPackageJson;\n  }\n\n  getAppUserDataPath(appName = this.getAppName()) {\n    return appName\n      ? path.join(this.getSystemPathAppData(), appName)\n      : undefined;\n  }\n\n  getAppVersion() {\n    return this.getAppPackageJson()?.version;\n  }\n\n  getElectronLogPath() {\n    return this.getAppLogPath();\n  }\n\n  getMacOsVersion() {\n    const release = Number(os.release().split('.')[0]);\n    if (release <= 19) {\n      return `10.${release - 4}`;\n    }\n\n    return release - 9;\n  }\n\n  /**\n   * @protected\n   * @returns {string}\n   */\n  getOsVersion() {\n    let osName = os.type().replace('_', ' ');\n    let osVersion = os.release();\n\n    if (osName === 'Darwin') {\n      osName = 'macOS';\n      osVersion = this.getMacOsVersion();\n    }\n\n    return `${osName} ${osVersion}`;\n  }\n\n  /**\n   * @return {PathVariables}\n   */\n  getPathVariables() {\n    const appName = this.getAppName();\n    const appVersion = this.getAppVersion();\n\n    const self = this;\n\n    return {\n      appData: this.getSystemPathAppData(),\n      appName,\n      appVersion,\n      get electronDefaultDir() {\n        return self.getElectronLogPath();\n      },\n      home: this.getSystemPathHome(),\n      libraryDefaultDir: this.getAppLogPath(appName),\n      libraryTemplate: this.getAppLogPath('{appName}'),\n      temp: this.getSystemPathTemp(),\n      userData: this.getAppUserDataPath(appName),\n    };\n  }\n\n  getSystemPathAppData() {\n    const home = this.getSystemPathHome();\n\n    switch (this.platform) {\n      case 'darwin': {\n        return path.join(home, 'Library/Application Support');\n      }\n\n      case 'win32': {\n        return process.env.APPDATA || path.join(home, 'AppData/Roaming');\n      }\n\n      default: {\n        return process.env.XDG_CONFIG_HOME || path.join(home, '.config');\n      }\n    }\n  }\n\n  getSystemPathHome() {\n    return os.homedir?.() || process.env.HOME;\n  }\n\n  getSystemPathTemp() {\n    return os.tmpdir();\n  }\n\n  getVersions() {\n    return {\n      app: `${this.getAppName()} ${this.getAppVersion()}`,\n      electron: undefined,\n      os: this.getOsVersion(),\n    };\n  }\n\n  isDev() {\n    return process.env.NODE_ENV === 'development'\n      || process.env.ELECTRON_IS_DEV === '1';\n  }\n\n  isElectron() {\n    return Boolean(process.versions.electron);\n  }\n\n  onAppEvent(_eventName, _handler) {\n    // Ignored in node.js\n  }\n\n  onAppReady(handler) {\n    handler();\n  }\n\n  onEveryWebContentsEvent(eventName, handler) {\n    // Ignored in node.js\n  }\n\n  /**\n   * Listen to async messages sent from opposite process\n   * @param {string} channel\n   * @param {function} listener\n   */\n  onIpc(channel, listener) {\n    // Ignored in node.js\n  }\n\n  onIpcInvoke(channel, listener) {\n    // Ignored in node.js\n  }\n\n  /**\n   * @param {string} url\n   * @param {Function} [logFunction]\n   */\n  openUrl(url, logFunction = console.error) { // eslint-disable-line no-console\n    const startMap = { darwin: 'open', win32: 'start', linux: 'xdg-open' };\n    const start = startMap[process.platform] || 'xdg-open';\n    childProcess.exec(`${start} ${url}`, {}, (err) => {\n      if (err) {\n        logFunction(err);\n      }\n    });\n  }\n\n  setAppName(appName) {\n    this.appName = appName;\n  }\n\n  setPlatform(platform) {\n    this.platform = platform;\n  }\n\n  setPreloadFileForSessions({\n    filePath, // eslint-disable-line no-unused-vars\n    includeFutureSession = true, // eslint-disable-line no-unused-vars\n    getSessions = () => [], // eslint-disable-line no-unused-vars\n  }) {\n    // Ignored in node.js\n  }\n\n  /**\n   * Sent a message to opposite process\n   * @param {string} channel\n   * @param {any} message\n   */\n  sendIpc(channel, message) {\n    // Ignored in node.js\n  }\n\n  showErrorBox(title, message) {\n    // Ignored in node.js\n  }\n}\n\nmodule.exports = NodeExternalApi;\n","'use strict';\n\nconst Logger = require('../core/Logger');\nconst ErrorHandler = require('./ErrorHandler');\nconst EventLogger = require('./EventLogger');\nconst transportConsole = require('./transports/console');\nconst transportFile = require('./transports/file');\nconst transportIpc = require('./transports/ipc');\nconst transportRemote = require('./transports/remote');\n\nmodule.exports = createDefaultLogger;\n\nfunction createDefaultLogger({ dependencies, initializeFn }) {\n  const defaultLogger = new Logger({\n    dependencies,\n    errorHandler: new ErrorHandler(),\n    eventLogger: new EventLogger(),\n    initializeFn,\n    isDev: dependencies.externalApi?.isDev(),\n    logId: 'default',\n    transportFactories: {\n      console: transportConsole,\n      file: transportFile,\n      ipc: transportIpc,\n      remote: transportRemote,\n    },\n    variables: {\n      processType: 'main',\n    },\n  });\n\n  defaultLogger.default = defaultLogger;\n  defaultLogger.Logger = Logger;\n\n  defaultLogger.processInternalErrorFn = (e) => {\n    defaultLogger.transports.console.writeFn({\n      message: {\n        data: ['Unhandled electron-log error', e],\n        level: 'error',\n      },\n    });\n  };\n\n  return defaultLogger;\n}\n","'use strict';\n\nconst NodeExternalApi = require('./NodeExternalApi');\nconst createDefaultLogger = require('./createDefaultLogger');\n\nconst externalApi = new NodeExternalApi();\n\nconst defaultLogger = createDefaultLogger({\n  dependencies: { externalApi },\n});\n\nmodule.exports = defaultLogger;\n","'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\n\nmodule.exports = {\n  findAndReadPackageJson,\n  tryReadJsonAt,\n};\n\n/**\n * @return {{ name?: string, version?: string}}\n */\nfunction findAndReadPackageJson() {\n  return tryReadJsonAt(getMainModulePath())\n    || tryReadJsonAt(extractPathFromArgs())\n    || tryReadJsonAt(process.resourcesPath, 'app.asar')\n    || tryReadJsonAt(process.resourcesPath, 'app')\n    || tryReadJsonAt(process.cwd())\n    || { name: undefined, version: undefined };\n}\n\n/**\n * @param {...string} searchPaths\n * @return {{ name?: string, version?: string } | undefined}\n */\nfunction tryReadJsonAt(...searchPaths) {\n  if (!searchPaths[0]) {\n    return undefined;\n  }\n\n  try {\n    const searchPath = path.join(...searchPaths);\n    const fileName = findUp('package.json', searchPath);\n    if (!fileName) {\n      return undefined;\n    }\n\n    const json = JSON.parse(fs.readFileSync(fileName, 'utf8'));\n    const name = json?.productName || json?.name;\n    if (!name || name.toLowerCase() === 'electron') {\n      return undefined;\n    }\n\n    if (name) {\n      return { name, version: json?.version };\n    }\n\n    return undefined;\n  } catch (e) {\n    return undefined;\n  }\n}\n\n/**\n * @param {string} fileName\n * @param {string} [cwd]\n * @return {string | null}\n */\nfunction findUp(fileName, cwd) {\n  let currentPath = cwd;\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const parsedPath = path.parse(currentPath);\n    const root = parsedPath.root;\n    const dir = parsedPath.dir;\n\n    if (fs.existsSync(path.join(currentPath, fileName))) {\n      return path.resolve(path.join(currentPath, fileName));\n    }\n\n    if (currentPath === root) {\n      return null;\n    }\n\n    currentPath = dir;\n  }\n}\n\n/**\n * Get app path from --user-data-dir cmd arg, passed to a renderer process\n * @return {string|null}\n */\nfunction extractPathFromArgs() {\n  const matchedArgs = process.argv.filter((arg) => {\n    return arg.indexOf('--user-data-dir=') === 0;\n  });\n\n  if (matchedArgs.length === 0 || typeof matchedArgs[0] !== 'string') {\n    return null;\n  }\n\n  const userDataDir = matchedArgs[0];\n  return userDataDir.replace('--user-data-dir=', '');\n}\n\nfunction getMainModulePath() {\n  try {\n    // Requires isn't available in ESM\n    return require.main?.filename;\n  } catch {\n    return undefined;\n  }\n}\n","'use strict';\n\nconst { transform } = require('./transform');\n\nmodule.exports = {\n  concatFirstStringElements,\n  formatScope,\n  formatText,\n  formatVariables,\n  timeZoneFromOffset,\n\n  format({ message, logger, transport, data = message?.data }) {\n    switch (typeof transport.format) {\n      case 'string': {\n        return transform({\n          message,\n          logger,\n          transforms: [formatVariables, formatScope, formatText],\n          transport,\n          initialData: [transport.format, ...data],\n        });\n      }\n\n      case 'function': {\n        return transport.format({\n          data,\n          level: message?.level || 'info',\n          logger,\n          message,\n          transport,\n        });\n      }\n\n      default: {\n        return data;\n      }\n    }\n  },\n};\n\n/**\n * The first argument of console.log may contain a template. In the library\n * the first element is a string related to transports.console.format. So\n * this function concatenates first two elements to make templates like %d\n * work\n * @param {*[]} data\n * @return {*[]}\n */\nfunction concatFirstStringElements({ data }) {\n  if (typeof data[0] !== 'string' || typeof data[1] !== 'string') {\n    return data;\n  }\n\n  if (data[0].match(/%[1cdfiOos]/)) {\n    return data;\n  }\n\n  return [`${data[0]} ${data[1]}`, ...data.slice(2)];\n}\n\nfunction timeZoneFromOffset(minutesOffset) {\n  const minutesPositive = Math.abs(minutesOffset);\n  const sign = minutesOffset >= 0 ? '-' : '+';\n  const hours = Math.floor(minutesPositive / 60).toString().padStart(2, '0');\n  const minutes = (minutesPositive % 60).toString().padStart(2, '0');\n  return `${sign}${hours}:${minutes}`;\n}\n\nfunction formatScope({ data, logger, message }) {\n  const { defaultLabel, labelLength } = logger?.scope || {};\n  const template = data[0];\n  let label = message.scope;\n\n  if (!label) {\n    label = defaultLabel;\n  }\n\n  let scopeText;\n  if (label === '') {\n    scopeText = labelLength > 0 ? ''.padEnd(labelLength + 3) : '';\n  } else if (typeof label === 'string') {\n    scopeText = ` (${label})`.padEnd(labelLength + 3);\n  } else {\n    scopeText = '';\n  }\n\n  data[0] = template.replace('{scope}', scopeText);\n  return data;\n}\n\nfunction formatVariables({ data, message }) {\n  let template = data[0];\n  if (typeof template !== 'string') {\n    return data;\n  }\n\n  // Add additional space to the end of {level}] template to align messages\n  template = template.replace('{level}]', `${message.level}]`.padEnd(6, ' '));\n\n  const date = message.date || new Date();\n  data[0] = template\n    .replace(/\\{(\\w+)}/g, (substring, name) => {\n      switch (name) {\n        case 'level': return message.level || 'info';\n        case 'logId': return message.logId;\n\n        case 'y': return date.getFullYear().toString(10);\n        case 'm': return (date.getMonth() + 1).toString(10).padStart(2, '0');\n        case 'd': return date.getDate().toString(10).padStart(2, '0');\n        case 'h': return date.getHours().toString(10).padStart(2, '0');\n        case 'i': return date.getMinutes().toString(10).padStart(2, '0');\n        case 's': return date.getSeconds().toString(10).padStart(2, '0');\n        case 'ms': return date.getMilliseconds().toString(10).padStart(3, '0');\n        case 'z': return timeZoneFromOffset(date.getTimezoneOffset());\n        case 'iso': return date.toISOString();\n\n        default: {\n          return message.variables?.[name] || substring;\n        }\n      }\n    })\n    .trim();\n\n  return data;\n}\n\nfunction formatText({ data }) {\n  const template = data[0];\n  if (typeof template !== 'string') {\n    return data;\n  }\n\n  const textTplPosition = template.lastIndexOf('{text}');\n  if (textTplPosition === template.length - 6) {\n    data[0] = template.replace(/\\s?{text}/, '');\n    if (data[0] === '') {\n      data.shift();\n    }\n\n    return data;\n  }\n\n  const templatePieces = template.split('{text}');\n  let result = [];\n\n  if (templatePieces[0] !== '') {\n    result.push(templatePieces[0]);\n  }\n\n  result = result.concat(data.slice(1));\n\n  if (templatePieces[1] !== '') {\n    result.push(templatePieces[1]);\n  }\n\n  return result;\n}\n","'use strict';\n\nconst util = require('util');\n\nmodule.exports = {\n  serialize,\n\n  maxDepth({ data, transport, depth = transport?.depth ?? 6 }) {\n    if (!data) {\n      return data;\n    }\n\n    if (depth < 1) {\n      if (Array.isArray(data)) return '[array]';\n      if (typeof data === 'object' && data) return '[object]';\n\n      return data;\n    }\n\n    if (Array.isArray(data)) {\n      return data.map((child) => module.exports.maxDepth({\n        data: child,\n        depth: depth - 1,\n      }));\n    }\n\n    if (typeof data !== 'object') {\n      return data;\n    }\n\n    if (data && typeof data.toISOString === 'function') {\n      return data;\n    }\n\n    // noinspection PointlessBooleanExpressionJS\n    if (data === null) {\n      return null;\n    }\n\n    if (data instanceof Error) {\n      return data;\n    }\n\n    const newJson = {};\n    for (const i in data) {\n      if (!Object.prototype.hasOwnProperty.call(data, i)) continue;\n      newJson[i] = module.exports.maxDepth({\n        data: data[i],\n        depth: depth - 1,\n      });\n    }\n\n    return newJson;\n  },\n\n  toJSON({ data }) {\n    return JSON.parse(JSON.stringify(data, createSerializer()));\n  },\n\n  toString({ data, transport }) {\n    const inspectOptions = transport?.inspectOptions || {};\n\n    const simplifiedData = data.map((item) => {\n      if (item === undefined) {\n        return undefined;\n      }\n\n      try {\n        const str = JSON.stringify(item, createSerializer(), '  ');\n        return str === undefined ? undefined : JSON.parse(str);\n      } catch (e) {\n        // There are some rare cases when an item can't be simplified.\n        // In that case, it's fine to pass it to util.format directly.\n        return item;\n      }\n    });\n\n    return util.formatWithOptions(inspectOptions, ...simplifiedData);\n  },\n};\n\n/**\n * @param {object} options?\n * @param {boolean} options.serializeMapAndSet?\n * @return {function}\n */\nfunction createSerializer(options = {}) {\n  const seen = new WeakSet();\n\n  return function (key, value) {\n    if (typeof value === 'object' && value !== null) {\n      if (seen.has(value)) {\n        return undefined;\n      }\n\n      seen.add(value);\n    }\n\n    return serialize(key, value, options);\n  };\n}\n\n/**\n * @param {string} key\n * @param {any} value\n * @param {object} options?\n * @return {any}\n */\nfunction serialize(key, value, options = {}) {\n  const serializeMapAndSet = options?.serializeMapAndSet !== false;\n\n  if (value instanceof Error) {\n    return value.stack;\n  }\n\n  if (!value) {\n    return value;\n  }\n\n  if (typeof value === 'function') {\n    return `[function] ${value.toString()}`;\n  }\n\n  if (value instanceof Date) {\n    return value.toISOString();\n  }\n\n  if (serializeMapAndSet && value instanceof Map && Object.fromEntries) {\n    return Object.fromEntries(value);\n  }\n\n  if (serializeMapAndSet && value instanceof Set && Array.from) {\n    return Array.from(value);\n  }\n\n  return value;\n}\n","'use strict';\n\nmodule.exports = {\n  transformStyles,\n\n  applyAnsiStyles({ data }) {\n    return transformStyles(data, styleToAnsi, resetAnsiStyle);\n  },\n\n  removeStyles({ data }) {\n    return transformStyles(data, () => '');\n  },\n};\n\nconst ANSI_COLORS = {\n  unset: '\\x1b[0m',\n  black: '\\x1b[30m',\n  red: '\\x1b[31m',\n  green: '\\x1b[32m',\n  yellow: '\\x1b[33m',\n  blue: '\\x1b[34m',\n  magenta: '\\x1b[35m',\n  cyan: '\\x1b[36m',\n  white: '\\x1b[37m',\n};\n\nfunction styleToAnsi(style) {\n  const color = style.replace(/color:\\s*(\\w+).*/, '$1').toLowerCase();\n  return ANSI_COLORS[color] || '';\n}\n\nfunction resetAnsiStyle(string) {\n  return string + ANSI_COLORS.unset;\n}\n\nfunction transformStyles(data, onStyleFound, onStyleApplied) {\n  const foundStyles = {};\n\n  return data.reduce((result, item, index, array) => {\n    if (foundStyles[index]) {\n      return result;\n    }\n\n    if (typeof item === 'string') {\n      let valueIndex = index;\n      let styleApplied = false;\n\n      item = item.replace(/%[1cdfiOos]/g, (match) => {\n        valueIndex += 1;\n\n        if (match !== '%c') {\n          return match;\n        }\n\n        const style = array[valueIndex];\n        if (typeof style === 'string') {\n          foundStyles[valueIndex] = true;\n          styleApplied = true;\n          return onStyleFound(style, item);\n        }\n\n        return match;\n      });\n\n      if (styleApplied && onStyleApplied) {\n        item = onStyleApplied(item);\n      }\n    }\n\n    result.push(item);\n    return result;\n  }, []);\n}\n","'use strict';\n\nmodule.exports = { transform };\n\nfunction transform({\n  logger,\n  message,\n  transport,\n\n  initialData = message?.data || [],\n  transforms = transport?.transforms,\n}) {\n  return transforms.reduce((data, trans) => {\n    if (typeof trans === 'function') {\n      return trans({ data, logger, message, transport });\n    }\n\n    return data;\n  }, initialData);\n}\n","'use strict';\n\n/* eslint-disable no-console */\n\nconst { concatFirstStringElements, format } = require('../transforms/format');\nconst { maxDepth, toJSON } = require('../transforms/object');\nconst { applyAnsiStyles, removeStyles } = require('../transforms/style');\nconst { transform } = require('../transforms/transform');\n\nconst consoleMethods = {\n  error: console.error,\n  warn: console.warn,\n  info: console.info,\n  verbose: console.info,\n  debug: console.debug,\n  silly: console.debug,\n  log: console.log,\n};\n\nmodule.exports = consoleTransportFactory;\n\nconst separator = process.platform === 'win32' ? '>' : '›';\nconst DEFAULT_FORMAT = `%c{h}:{i}:{s}.{ms}{scope}%c ${separator} {text}`;\n\nObject.assign(consoleTransportFactory, {\n  DEFAULT_FORMAT,\n});\n\nfunction consoleTransportFactory(logger) {\n  return Object.assign(transport, {\n    format: DEFAULT_FORMAT,\n    level: 'silly',\n    transforms: [\n      addTemplateColors,\n      format,\n      formatStyles,\n      concatFirstStringElements,\n      maxDepth,\n      toJSON,\n    ],\n    useStyles: process.env.FORCE_STYLES,\n\n    writeFn({ message }) {\n      const consoleLogFn = consoleMethods[message.level] || consoleMethods.info;\n      consoleLogFn(...message.data);\n    },\n  });\n\n  function transport(message) {\n    const data = transform({ logger, message, transport });\n    transport.writeFn({\n      message: { ...message, data },\n    });\n  }\n}\n\nfunction addTemplateColors({ data, message, transport }) {\n  if (transport.format !== DEFAULT_FORMAT) {\n    return data;\n  }\n\n  return [`color:${levelToStyle(message.level)}`, 'color:unset', ...data];\n}\n\nfunction canUseStyles(useStyleValue, level) {\n  if (typeof useStyleValue === 'boolean') {\n    return useStyleValue;\n  }\n\n  const useStderr = level === 'error' || level === 'warn';\n  const stream = useStderr ? process.stderr : process.stdout;\n  return stream && stream.isTTY;\n}\n\nfunction formatStyles(args) {\n  const { message, transport } = args;\n  const useStyles = canUseStyles(transport.useStyles, message.level);\n  const nextTransform = useStyles ? applyAnsiStyles : removeStyles;\n  return nextTransform(args);\n}\n\nfunction levelToStyle(level) {\n  const map = { error: 'red', warn: 'yellow', info: 'cyan', default: 'unset' };\n  return map[level] || map.default;\n}\n","'use strict';\n\nconst EventEmitter = require('events');\nconst fs = require('fs');\nconst os = require('os');\n\nclass File extends EventEmitter {\n  asyncWriteQueue = [];\n  bytesWritten = 0;\n  hasActiveAsyncWriting = false;\n  path = null;\n  initialSize = undefined;\n  writeOptions = null;\n  writeAsync = false;\n\n  constructor({\n    path,\n    writeOptions = { encoding: 'utf8', flag: 'a', mode: 0o666 },\n    writeAsync = false,\n  }) {\n    super();\n\n    this.path = path;\n    this.writeOptions = writeOptions;\n    this.writeAsync = writeAsync;\n  }\n\n  get size() {\n    return this.getSize();\n  }\n\n  clear() {\n    try {\n      fs.writeFileSync(this.path, '', {\n        mode: this.writeOptions.mode,\n        flag: 'w',\n      });\n      this.reset();\n      return true;\n    } catch (e) {\n      if (e.code === 'ENOENT') {\n        return true;\n      }\n\n      this.emit('error', e, this);\n      return false;\n    }\n  }\n\n  crop(bytesAfter) {\n    try {\n      const content = readFileSyncFromEnd(this.path, bytesAfter || 4096);\n      this.clear();\n      this.writeLine(`[log cropped]${os.EOL}${content}`);\n    } catch (e) {\n      this.emit(\n        'error',\n        new Error(`Couldn't crop file ${this.path}. ${e.message}`),\n        this,\n      );\n    }\n  }\n\n  getSize() {\n    if (this.initialSize === undefined) {\n      try {\n        const stats = fs.statSync(this.path);\n        this.initialSize = stats.size;\n      } catch (e) {\n        this.initialSize = 0;\n      }\n    }\n\n    return this.initialSize + this.bytesWritten;\n  }\n\n  increaseBytesWrittenCounter(text) {\n    this.bytesWritten += Buffer.byteLength(text, this.writeOptions.encoding);\n  }\n\n  isNull() {\n    return false;\n  }\n\n  nextAsyncWrite() {\n    const file = this;\n\n    if (this.hasActiveAsyncWriting || this.asyncWriteQueue.length === 0) {\n      return;\n    }\n\n    const text = this.asyncWriteQueue.join('');\n    this.asyncWriteQueue = [];\n    this.hasActiveAsyncWriting = true;\n\n    fs.writeFile(this.path, text, this.writeOptions, (e) => {\n      file.hasActiveAsyncWriting = false;\n\n      if (e) {\n        file.emit(\n          'error',\n          new Error(`Couldn't write to ${file.path}. ${e.message}`),\n          this,\n        );\n      } else {\n        file.increaseBytesWrittenCounter(text);\n      }\n\n      file.nextAsyncWrite();\n    });\n  }\n\n  reset() {\n    this.initialSize = undefined;\n    this.bytesWritten = 0;\n  }\n\n  toString() {\n    return this.path;\n  }\n\n  writeLine(text) {\n    text += os.EOL;\n\n    if (this.writeAsync) {\n      this.asyncWriteQueue.push(text);\n      this.nextAsyncWrite();\n      return;\n    }\n\n    try {\n      fs.writeFileSync(this.path, text, this.writeOptions);\n      this.increaseBytesWrittenCounter(text);\n    } catch (e) {\n      this.emit(\n        'error',\n        new Error(`Couldn't write to ${this.path}. ${e.message}`),\n        this,\n      );\n    }\n  }\n}\n\nmodule.exports = File;\n\nfunction readFileSyncFromEnd(filePath, bytesCount) {\n  const buffer = Buffer.alloc(bytesCount);\n  const stats = fs.statSync(filePath);\n\n  const readLength = Math.min(stats.size, bytesCount);\n  const offset = Math.max(0, stats.size - bytesCount);\n\n  const fd = fs.openSync(filePath, 'r');\n  const totalBytes = fs.readSync(fd, buffer, 0, readLength, offset);\n  fs.closeSync(fd);\n\n  return buffer.toString('utf8', 0, totalBytes);\n}\n","'use strict';\n\nconst EventEmitter = require('events');\nconst fs = require('fs');\nconst path = require('path');\nconst File = require('./File');\nconst NullFile = require('./NullFile');\n\nclass FileRegistry extends EventEmitter {\n  store = {};\n\n  constructor() {\n    super();\n    this.emitError = this.emitError.bind(this);\n  }\n\n  /**\n   * Provide a File object corresponding to the filePath\n   * @param {string} filePath\n   * @param {WriteOptions} [writeOptions]\n   * @param {boolean} [writeAsync]\n   * @return {File}\n   */\n  provide({ filePath, writeOptions = {}, writeAsync = false }) {\n    let file;\n    try {\n      filePath = path.resolve(filePath);\n\n      if (this.store[filePath]) {\n        return this.store[filePath];\n      }\n\n      file = this.createFile({ filePath, writeOptions, writeAsync });\n    } catch (e) {\n      file = new NullFile({ path: filePath });\n      this.emitError(e, file);\n    }\n\n    file.on('error', this.emitError);\n    this.store[filePath] = file;\n    return file;\n  }\n\n  /**\n   * @param {string} filePath\n   * @param {WriteOptions} writeOptions\n   * @param {boolean} async\n   * @return {File}\n   * @private\n   */\n  createFile({ filePath, writeOptions, writeAsync }) {\n    this.testFileWriting({ filePath, writeOptions });\n    return new File({ path: filePath, writeOptions, writeAsync });\n  }\n\n  /**\n   * @param {Error} error\n   * @param {File} file\n   * @private\n   */\n  emitError(error, file) {\n    this.emit('error', error, file);\n  }\n\n  /**\n   * @param {string} filePath\n   * @param {WriteOptions} writeOptions\n   * @private\n   */\n  testFileWriting({ filePath, writeOptions }) {\n    fs.mkdirSync(path.dirname(filePath), { recursive: true });\n    fs.writeFileSync(filePath, '', { flag: 'a', mode: writeOptions.mode });\n  }\n}\n\nmodule.exports = FileRegistry;\n","'use strict';\n\nconst File = require('./File');\n\nclass NullFile extends File {\n  clear() {\n\n  }\n\n  crop() {\n\n  }\n\n  getSize() {\n    return 0;\n  }\n\n  isNull() {\n    return true;\n  }\n\n  writeLine() {\n\n  }\n}\n\nmodule.exports = NullFile;\n","'use strict';\n\nconst fs = require('fs');\nconst os = require('os');\nconst path = require('path');\nconst FileRegistry = require('./FileRegistry');\nconst { transform } = require('../../transforms/transform');\nconst { removeStyles } = require('../../transforms/style');\nconst {\n  format,\n  concatFirstStringElements,\n} = require('../../transforms/format');\nconst { toString } = require('../../transforms/object');\n\nmodule.exports = fileTransportFactory;\n\n// Shared between multiple file transport instances\nconst globalRegistry = new FileRegistry();\n\nfunction fileTransportFactory(\n  logger,\n  { registry = globalRegistry, externalApi } = {},\n) {\n  /** @type {PathVariables} */\n  let pathVariables;\n\n  if (registry.listenerCount('error') < 1) {\n    registry.on('error', (e, file) => {\n      logConsole(`Can't write to ${file}`, e);\n    });\n  }\n\n  return Object.assign(transport, {\n    fileName: getDefaultFileName(logger.variables.processType),\n    format: '[{y}-{m}-{d} {h}:{i}:{s}.{ms}] [{level}]{scope} {text}',\n    getFile,\n    inspectOptions: { depth: 5 },\n    level: 'silly',\n    maxSize: 1024 ** 2,\n    readAllLogs,\n    sync: true,\n    transforms: [removeStyles, format, concatFirstStringElements, toString],\n    writeOptions: { flag: 'a', mode: 0o666, encoding: 'utf8' },\n\n    archiveLogFn(file) {\n      const oldPath = file.toString();\n      const inf = path.parse(oldPath);\n      try {\n        fs.renameSync(oldPath, path.join(inf.dir, `${inf.name}.old${inf.ext}`));\n      } catch (e) {\n        logConsole('Could not rotate log', e);\n        const quarterOfMaxSize = Math.round(transport.maxSize / 4);\n        file.crop(Math.min(quarterOfMaxSize, 256 * 1024));\n      }\n    },\n\n    resolvePathFn(vars) {\n      return path.join(vars.libraryDefaultDir, vars.fileName);\n    },\n\n    setAppName(name) {\n      logger.dependencies.externalApi.setAppName(name);\n    },\n  });\n\n  function transport(message) {\n    const file = getFile(message);\n\n    const needLogRotation = transport.maxSize > 0\n      && file.size > transport.maxSize;\n\n    if (needLogRotation) {\n      transport.archiveLogFn(file);\n      file.reset();\n    }\n\n    const content = transform({ logger, message, transport });\n    file.writeLine(content);\n  }\n\n  function initializeOnFirstAccess() {\n    if (pathVariables) {\n      return;\n    }\n\n    // Make a shallow copy of pathVariables to keep getters intact\n    pathVariables = Object.create(\n      Object.prototype,\n      {\n        ...Object.getOwnPropertyDescriptors(\n          externalApi.getPathVariables(),\n        ),\n        fileName: {\n          get() {\n            return transport.fileName;\n          },\n          enumerable: true,\n        },\n      },\n    );\n\n    if (typeof transport.archiveLog === 'function') {\n      transport.archiveLogFn = transport.archiveLog;\n      logConsole('archiveLog is deprecated. Use archiveLogFn instead');\n    }\n\n    if (typeof transport.resolvePath === 'function') {\n      transport.resolvePathFn = transport.resolvePath;\n      logConsole('resolvePath is deprecated. Use resolvePathFn instead');\n    }\n  }\n\n  function logConsole(message, error = null, level = 'error') {\n    const data = [`electron-log.transports.file: ${message}`];\n\n    if (error) {\n      data.push(error);\n    }\n\n    logger.transports.console({ data, date: new Date(), level });\n  }\n\n  function getFile(msg) {\n    initializeOnFirstAccess();\n\n    const filePath = transport.resolvePathFn(pathVariables, msg);\n    return registry.provide({\n      filePath,\n      writeAsync: !transport.sync,\n      writeOptions: transport.writeOptions,\n    });\n  }\n\n  function readAllLogs({ fileFilter = (f) => f.endsWith('.log') } = {}) {\n    initializeOnFirstAccess();\n    const logsPath = path.dirname(transport.resolvePathFn(pathVariables));\n\n    if (!fs.existsSync(logsPath)) {\n      return [];\n    }\n\n    return fs.readdirSync(logsPath)\n      .map((fileName) => path.join(logsPath, fileName))\n      .filter(fileFilter)\n      .map((logPath) => {\n        try {\n          return {\n            path: logPath,\n            lines: fs.readFileSync(logPath, 'utf8').split(os.EOL),\n          };\n        } catch {\n          return null;\n        }\n      })\n      .filter(Boolean);\n  }\n}\n\nfunction getDefaultFileName(processType = process.type) {\n  switch (processType) {\n    case 'renderer': return 'renderer.log';\n    case 'worker': return 'worker.log';\n    default: return 'main.log';\n  }\n}\n","'use strict';\n\nconst { maxDepth, toJSON } = require('../transforms/object');\nconst { transform } = require('../transforms/transform');\n\nmodule.exports = ipcTransportFactory;\n\n/**\n * @param logger\n * @param {ElectronExternalApi} externalApi\n * @returns {transport|null}\n */\nfunction ipcTransportFactory(logger, { externalApi }) {\n  Object.assign(transport, {\n    depth: 3,\n    eventId: '__ELECTRON_LOG_IPC__',\n    level: logger.isDev ? 'silly' : false,\n    transforms: [toJSON, maxDepth],\n  });\n\n  return externalApi?.isElectron() ? transport : undefined;\n\n  function transport(message) {\n    if (message?.variables?.processType === 'renderer') {\n      return;\n    }\n\n    externalApi?.sendIpc(transport.eventId, {\n      ...message,\n      data: transform({ logger, message, transport }),\n    });\n  }\n}\n","'use strict';\n\nconst http = require('http');\nconst https = require('https');\nconst { transform } = require('../transforms/transform');\nconst { removeStyles } = require('../transforms/style');\nconst { toJSON, maxDepth } = require('../transforms/object');\n\nmodule.exports = remoteTransportFactory;\n\nfunction remoteTransportFactory(logger) {\n  return Object.assign(transport, {\n    client: { name: 'electron-application' },\n    depth: 6,\n    level: false,\n    requestOptions: {},\n    transforms: [removeStyles, toJSON, maxDepth],\n\n    makeBodyFn({ message }) {\n      return JSON.stringify({\n        client: transport.client,\n        data: message.data,\n        date: message.date.getTime(),\n        level: message.level,\n        scope: message.scope,\n        variables: message.variables,\n      });\n    },\n\n    processErrorFn({ error }) {\n      logger.processMessage(\n        {\n          data: [`electron-log: can't POST ${transport.url}`, error],\n          level: 'warn',\n        },\n        { transports: ['console', 'file'] },\n      );\n    },\n\n    sendRequestFn({ serverUrl, requestOptions, body }) {\n      const httpTransport = serverUrl.startsWith('https:') ? https : http;\n\n      const request = httpTransport.request(serverUrl, {\n        method: 'POST',\n        ...requestOptions,\n        headers: {\n          'Content-Type': 'application/json',\n          'Content-Length': body.length,\n          ...requestOptions.headers,\n        },\n      });\n\n      request.write(body);\n      request.end();\n\n      return request;\n    },\n  });\n\n  function transport(message) {\n    if (!transport.url) {\n      return;\n    }\n\n    const body = transport.makeBodyFn({\n      logger,\n      message: { ...message, data: transform({ logger, message, transport }) },\n      transport,\n    });\n\n    const request = transport.sendRequestFn({\n      serverUrl: transport.url,\n      requestOptions: transport.requestOptions,\n      body: Buffer.from(body, 'utf8'),\n    });\n\n    request.on('error', (error) => transport.processErrorFn({\n      error,\n      logger,\n      message,\n      request,\n      transport,\n    }));\n  }\n}\n","'use strict';\n\nlet electron = {};\n\ntry {\n  // eslint-disable-next-line global-require,import/no-extraneous-dependencies\n  electron = require('electron');\n} catch (e) {\n  // require isn't available, not from a preload script\n}\n\nif (electron.ipcRenderer) {\n  initialize(electron);\n}\n\nif (typeof module === 'object') {\n  module.exports = initialize;\n}\n\n/**\n * @param {Electron.ContextBridge} contextBridge\n * @param {Electron.IpcRenderer} ipcRenderer\n */\nfunction initialize({ contextBridge, ipcRenderer }) {\n  if (!ipcRenderer) {\n    return;\n  }\n\n  ipcRenderer.on('__ELECTRON_LOG_IPC__', (_, message) => {\n    window.postMessage({ cmd: 'message', ...message });\n  });\n\n  ipcRenderer\n    .invoke('__ELECTRON_LOG__', { cmd: 'getOptions' })\n    // eslint-disable-next-line no-console\n    .catch((e) => console.error(new Error(\n      'electron-log isn\\'t initialized in the main process. '\n      + `Please call log.initialize() before. ${e.message}`,\n    )));\n\n  const electronLog = {\n    sendToMain(message) {\n      try {\n        ipcRenderer.send('__ELECTRON_LOG__', message);\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.error('electronLog.sendToMain ', e, 'data:', message);\n\n        ipcRenderer.send('__ELECTRON_LOG__', {\n          cmd: 'errorHandler',\n          error: { message: e?.message, stack: e?.stack },\n          errorName: 'sendToMain',\n        });\n      }\n    },\n\n    log(...data) {\n      electronLog.sendToMain({ data, level: 'info' });\n    },\n  };\n\n  for (const level of ['error', 'warn', 'info', 'verbose', 'debug', 'silly']) {\n    electronLog[level] = (...data) => electronLog.sendToMain({\n      data,\n      level,\n    });\n  }\n\n  if (contextBridge && process.contextIsolated) {\n    try {\n      contextBridge.exposeInMainWorld('__electronLog', electronLog);\n    } catch {\n      // Sometimes this files can be included twice\n    }\n  }\n\n  if (typeof window === 'object') {\n    window.__electronLog = electronLog;\n  } else {\n    // noinspection JSConstantReassignment\n    __electronLog = electronLog;\n  }\n}\n","'use strict';\n\nconst Logger = require('../core/Logger');\nconst RendererErrorHandler = require('./lib/RendererErrorHandler');\nconst transportConsole = require('./lib/transports/console');\nconst transportIpc = require('./lib/transports/ipc');\n\nmodule.exports = createLogger();\nmodule.exports.Logger = Logger;\nmodule.exports.default = module.exports;\n\nfunction createLogger() {\n  const logger = new Logger({\n    allowUnknownLevel: true,\n    errorHandler: new RendererErrorHandler(),\n    initializeFn: () => {},\n    logId: 'default',\n    transportFactories: {\n      console: transportConsole,\n      ipc: transportIpc,\n    },\n    variables: {\n      processType: 'renderer',\n    },\n  });\n\n  logger.errorHandler.setOptions({\n    logFn({ error, errorName, showDialog }) {\n      logger.transports.console({\n        data: [errorName, error].filter(Boolean),\n        level: 'error',\n      });\n      logger.transports.ipc({\n        cmd: 'errorHandler',\n        error: {\n          cause: error?.cause,\n          code: error?.code,\n          name: error?.name,\n          message: error?.message,\n          stack: error?.stack,\n        },\n        errorName,\n        logId: logger.logId,\n        showDialog,\n      });\n    },\n  });\n\n  if (typeof window === 'object') {\n    window.addEventListener('message', (event) => {\n      const { cmd, logId, ...message } = event.data || {};\n      const instance = Logger.getInstance({ logId });\n\n      if (cmd === 'message') {\n        instance.processMessage(message, { transports: ['console'] });\n      }\n    });\n  }\n\n  // To support custom levels\n  return new Proxy(logger, {\n    get(target, prop) {\n      if (typeof target[prop] !== 'undefined') {\n        return target[prop];\n      }\n\n      return (...data) => logger.logData(data, { level: prop });\n    },\n  });\n}\n","'use strict';\n\n// eslint-disable-next-line no-console\nconst consoleError = console.error;\n\nclass RendererErrorHandler {\n  logFn = null;\n  onError = null;\n  showDialog = false;\n  preventDefault = true;\n\n  constructor({ logFn = null } = {}) {\n    this.handleError = this.handleError.bind(this);\n    this.handleRejection = this.handleRejection.bind(this);\n    this.startCatching = this.startCatching.bind(this);\n    this.logFn = logFn;\n  }\n\n  handle(error, {\n    logFn = this.logFn,\n    errorName = '',\n    onError = this.onError,\n    showDialog = this.showDialog,\n  } = {}) {\n    try {\n      if (onError?.({ error, errorName, processType: 'renderer' }) !== false) {\n        logFn({ error, errorName, showDialog });\n      }\n    } catch {\n      consoleError(error);\n    }\n  }\n\n  setOptions({ logFn, onError, preventDefault, showDialog }) {\n    if (typeof logFn === 'function') {\n      this.logFn = logFn;\n    }\n\n    if (typeof onError === 'function') {\n      this.onError = onError;\n    }\n\n    if (typeof preventDefault === 'boolean') {\n      this.preventDefault = preventDefault;\n    }\n\n    if (typeof showDialog === 'boolean') {\n      this.showDialog = showDialog;\n    }\n  }\n\n  startCatching({ onError, showDialog } = {}) {\n    if (this.isActive) {\n      return;\n    }\n\n    this.isActive = true;\n    this.setOptions({ onError, showDialog });\n\n    window.addEventListener('error', (event) => {\n      this.preventDefault && event.preventDefault?.();\n      this.handleError(event.error || event);\n    });\n    window.addEventListener('unhandledrejection', (event) => {\n      this.preventDefault && event.preventDefault?.();\n      this.handleRejection(event.reason || event);\n    });\n  }\n\n  handleError(error) {\n    this.handle(error, { errorName: 'Unhandled' });\n  }\n\n  handleRejection(reason) {\n    const error = reason instanceof Error\n      ? reason\n      : new Error(JSON.stringify(reason));\n    this.handle(error, { errorName: 'Unhandled rejection' });\n  }\n}\n\nmodule.exports = RendererErrorHandler;\n","'use strict';\n\n/* eslint-disable no-console */\n\nmodule.exports = consoleTransportRendererFactory;\n\nconst consoleMethods = {\n  error: console.error,\n  warn: console.warn,\n  info: console.info,\n  verbose: console.info,\n  debug: console.debug,\n  silly: console.debug,\n  log: console.log,\n};\n\nfunction consoleTransportRendererFactory(logger) {\n  return Object.assign(transport, {\n    format: '{h}:{i}:{s}.{ms}{scope} › {text}',\n\n    formatDataFn({\n      data = [],\n      date = new Date(),\n      format = transport.format,\n      logId = logger.logId,\n      scope = logger.scopeName,\n      ...message\n    }) {\n      if (typeof format === 'function') {\n        return format({ ...message, data, date, logId, scope });\n      }\n\n      if (typeof format !== 'string') {\n        return data;\n      }\n\n      data.unshift(format);\n\n      // Concatenate first two data items to support printf-like templates\n      if (typeof data[1] === 'string' && data[1].match(/%[1cdfiOos]/)) {\n        data = [`${data[0]} ${data[1]}`, ...data.slice(2)];\n      }\n\n      data[0] = data[0]\n        .replace(/\\{(\\w+)}/g, (substring, name) => {\n          switch (name) {\n            case 'level': return message.level;\n            case 'logId': return logId;\n            case 'scope': return scope ? ` (${scope})` : '';\n            case 'text': return '';\n\n            case 'y': return date.getFullYear().toString(10);\n            case 'm': return (date.getMonth() + 1).toString(10)\n              .padStart(2, '0');\n            case 'd': return date.getDate().toString(10).padStart(2, '0');\n            case 'h': return date.getHours().toString(10).padStart(2, '0');\n            case 'i': return date.getMinutes().toString(10).padStart(2, '0');\n            case 's': return date.getSeconds().toString(10).padStart(2, '0');\n            case 'ms': return date.getMilliseconds().toString(10)\n              .padStart(3, '0');\n            case 'iso': return date.toISOString();\n\n            default: {\n              return message.variables?.[name] || substring;\n            }\n          }\n        })\n        .trim();\n\n      return data;\n    },\n\n    writeFn({ message: { level, data } }) {\n      const consoleLogFn = consoleMethods[level] || consoleMethods.info;\n\n      // make an empty call stack\n      setTimeout(() => consoleLogFn(...data));\n    },\n\n  });\n\n  function transport(message) {\n    transport.writeFn({\n      message: { ...message, data: transport.formatDataFn(message) },\n    });\n  }\n}\n","'use strict';\n\nmodule.exports = ipcTransportRendererFactory;\n\nconst RESTRICTED_TYPES = new Set([Promise, WeakMap, WeakSet]);\n\nfunction ipcTransportRendererFactory(logger) {\n  return Object.assign(transport, {\n    depth: 5,\n\n    serializeFn(data, { depth = 5, seen = new WeakSet() } = {}) {\n      if (seen.has(data)) {\n        return '[Circular]';\n      }\n\n      if (depth < 1) {\n        if (isPrimitive(data)) {\n          return data;\n        }\n\n        if (Array.isArray(data)) {\n          return '[Array]';\n        }\n\n        return `[${typeof data}]`;\n      }\n\n      if (['function', 'symbol'].includes(typeof data)) {\n        return data.toString();\n      }\n\n      if (isPrimitive(data)) {\n        return data;\n      }\n\n      // Object types\n\n      if (RESTRICTED_TYPES.has(data.constructor)) {\n        return `[${data.constructor.name}]`;\n      }\n\n      if (Array.isArray(data)) {\n        return data.map((item) => transport.serializeFn(\n          item,\n          { depth: depth - 1, seen },\n        ));\n      }\n\n      if (data instanceof Date) {\n        return data.toISOString();\n      }\n\n      if (data instanceof Error) {\n        return data.stack;\n      }\n\n      if (data instanceof Map) {\n        return new Map(\n          Array\n            .from(data)\n            .map(([key, value]) => [\n              transport.serializeFn(key, { depth: depth - 1, seen }),\n              transport.serializeFn(value, { depth: depth - 1, seen }),\n            ]),\n        );\n      }\n\n      if (data instanceof Set) {\n        return new Set(\n          Array.from(data).map(\n            (val) => transport.serializeFn(val, { depth: depth - 1, seen }),\n          ),\n        );\n      }\n\n      seen.add(data);\n\n      return Object.fromEntries(\n        Object.entries(data).map(\n          ([key, value]) => [\n            key,\n            transport.serializeFn(value, { depth: depth - 1, seen }),\n          ],\n        ),\n      );\n    },\n  });\n\n  function transport(message) {\n    if (!window.__electronLog) {\n      logger.processMessage(\n        {\n          data: ['electron-log: logger isn\\'t initialized in the main process'],\n          level: 'error',\n        },\n        { transports: ['console'] },\n      );\n      return;\n    }\n\n    try {\n      __electronLog.sendToMain(transport.serializeFn(message, {\n        depth: transport.depth,\n      }));\n    } catch (e) {\n      logger.transports.console({\n        data: ['electronLog.transports.ipc', e, 'data:', message.data],\n        level: 'error',\n      });\n    }\n  }\n}\n\n/**\n * Is type primitive, including null and undefined\n * @param {any} value\n * @returns {boolean}\n */\nfunction isPrimitive(value) {\n  return Object(value) !== value;\n}\n","module.exports = require(\"child_process\");","module.exports = require(\"electron\");","module.exports = require(\"events\");","module.exports = require(\"fs\");","module.exports = require(\"http\");","module.exports = require(\"https\");","module.exports = require(\"os\");","module.exports = require(\"path\");","module.exports = require(\"util\");","import electron from 'electron';\n\nif (typeof electron === 'string') {\n\tthrow new TypeError('Not running in an Electron environment!');\n}\n\nconst {env} = process; // eslint-disable-line n/prefer-global/process\nconst isEnvSet = 'ELECTRON_IS_DEV' in env;\nconst getFromEnv = Number.parseInt(env.ELECTRON_IS_DEV, 10) === 1;\n\nconst isDev = isEnvSet ? getFromEnv : !electron.app.isPackaged;\n\nexport default isDev;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the module cache\n__webpack_require__.c = __webpack_module_cache__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","","// module cache are used so entry inlining is disabled\n// startup\n// Load entry module and return exports\nvar __webpack_exports__ = __webpack_require__(__webpack_require__.s = \"./electron/main.js\");\n",""],"names":["electron","require","isDev","log","fs","info","warn","app","BrowserWindow","path","mainWindow","createWindow","process","env","ELECTRON_DISABLE_SECURITY_WARNINGS","width","height","webPreferences","nodeIntegration","loadURL","webContents","openDevTools","__dirname","join","getAppPath","readdir","err","files","forEach","file","concat","on","platform","quit"],"sourceRoot":""}